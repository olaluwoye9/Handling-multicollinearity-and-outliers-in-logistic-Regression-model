rm(list = ls())
library(RobStatTM)
library(robcbi)
data(Finney)
Vol<-Finney$Vol
Rate<-Finney$Rate
y<-Finney$Resp
x1<-log(Vol); x2<- log(Rate)
X=cbind(x1,x2)
dd=data.frame(y,X)#the standardized dataset
n=nrow(dd)
p=ncol(dd)
X=as.matrix(dd[,2:p])#creating the matrix x
I=diag(rep(1,p-1))
X=scale(X)#standardizing the regressors
y=dd$y#y
dd=data.frame(y,X)#the standardized dataset
maxIter=100;tol=1E-7;#maimum iteration and tolerance
b=matrix(0,nrow=ncol(X),ncol=maxIter)#initializing the beta values
#X <- cbind(X) # add constant
b[,1]=glm(y~.-1,family=binomial(link="logit"),data=dd,maxit=10000)$coefficients#first beta values

for(i in 2:maxIter){
  
  eta=X%*%(b[,i-1])#preceeding beta
  pi=1/(1+exp(-eta))
  nu=as.vector(pi*(1-pi)) 
  z=(eta+(y-pi)/nu)
  b[,i]=glm.fit(X,z,nu,intercept=F)$coef#final beta for the ith iteration
  
  if(max(abs(b[,i]-b[,i-1])/(abs(b[i-1])+0.01*tol))<tol)#condition for convergence as close as possible to zero
    break
}
if (i>maxIter) warning('max iteration exceeded')
V=t(X)%*%diag(nu)%*%X
vb=solve(t(X)%*%diag(nu)%*%X)
coef=b[,i]
var=vb
m=V
e=eigen(m)$values
  CI=max(e)/min(e)#condition index
  Q=as.matrix(eigen(m)$vectors)
  amle=t(Q)%*%coef
  d1=max(c(0,abs(min(((coef^2)))/((1/e)+coef^2))))
    d=max(c(0,abs(min(((coef^2-1)))/((1/e)+coef^2))))
  #k1=d1
  #k1=sqrt(min(1/(coef^2)))
  k1=((p/sum(coef^2)))
  #ki=diag(1/(e/(1+2*e*coef^2)))
  ki=e/(1+2*e*(coef^2))
  
  k2=max(0,min(ki))
  MM=logregBY(X, y, intercept=0)$coefficients
  #MMM=logregWBY(X, y, intercept = 0, const = 0.5, kmax = 1000, maxhalf = 10)$coefficients
  MMM=cubinf(X,y, family=binomial, control=list(ufact=3.2), intercept=FALSE)$coefficients
  d1m=max(c(0,abs(min(((MM^2)))/((1/e)+MM^2))))
  d1mm=max(c(0,abs(min(((MMM^2)))/((1/e)+MMM^2))))

  kin=e/(1+2*e*(coef^2))
  #k1m=sqrt(min(1/(MM^2)))
  #k1m=max(c(0,abs(min(((MM^2)))/((1/e)+MM^2))))
  k1m=((p/sum(MM^2)))
  k1mm=((p/sum(MMM^2)))
  k2m=max(0,min(kin))
  #ridge1=solve(V+k*I)%*%V%*%coef
  ridge2=solve(V+k1*I)%*%V%*%coef
  ridgem=solve(V+k1m*I)%*%V%*%MM
  ridgemm=solve(V+k1mm*I)%*%V%*%MMM

  
  liu=solve(V+I)%*%(V+d1*I)%*%coef
  lium=solve(V+I)%*%(V+d1m*I)%*%MM
liumm=solve(V+I)%*%(V+d1mm*I)%*%MMM
   
  kl1=solve(V+k1*I)%*%(V-k1*I)%*%coef
  kl2=solve(V+k2*I)%*%(V-k2*I)%*%coef
  kl2m=solve(V+k1*I)%*%(V-k1*I)%*%MM



mmle=sum(1/e)

mseridge=sum(e/((e+k1)^2))+(k1^2)*sum((coef^2)/((e+k1)^2))
mseridgem=sum(e/((e+k1m)^2))+(k1m^2)*sum((MM^2)/((e+k1m)^2))
mseridgemm=sum(e/((e+k1mm)^2))+(k1mm^2)*sum((MMM^2)/((e+k1mm)^2))



mseliu=sum(((e+d1)^2)/(e*(e+1)^2)+(((d1-1)^2)*sum((coef^2)/(e+1)^2)))
mselium=sum(((e+d1m)^2)/(e*(e+1)^2)+(((d1m-1)^2)*sum((MM^2)/(e+1)^2)))
mseliumm=sum(((e+d1mm)^2)/(e*(e+1)^2)+(((d1mm-1)^2)*sum((MMM^2)/(e+1)^2)))



tab=cbind(coef,liu,lium,liumm,ridge2,ridgem,ridgemm)
tab=t(tab)
t2=c(mmle,mseliu,mselium,mseliumm,mseridge,mseridgem,mseridgemm)
tab=cbind(tab,t2)
rownames(tab)=c('MLE','LIU','RobustLIU','liuwby','RIDGEK1','Robustridge','ridgewby')
colnames(tab)=c('X1','X2','MSE')
tab
t3=c(d1,d1m,d1mm,k1,k1m,k1mm)
t3